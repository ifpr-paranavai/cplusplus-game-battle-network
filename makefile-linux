# Diretório onde os objetos e arquivos de dependência serão armazenados
BUILD_DIR = build
BUILD_DIR_TEST = build-test

# Flags do compilador
CXXFLAGS = -I src/include -std=c++20 -g -O0 `pkg-config --cflags sdl2 SDL2_mixer SDL2_image SDL2_ttf`
LDFLAGS = 
LIBS = `pkg-config --libs sdl2 SDL2_mixer SDL2_image SDL2_ttf`

# Lista de arquivos fonte
SOURCES = src/main.cpp $(wildcard src/application/*/*.cpp) $(wildcard src/adapters/*/*/*.cpp) $(wildcard src/domain/*/*/*.cpp) $(wildcard src/utils/*/*.cpp) $(wildcard src/domain/*/*/*/*.cpp)

# Objetos gerados a partir dos arquivos fonte, agora armazenados no BUILD_DIR
OBJECTS = $(patsubst src/%.cpp,$(BUILD_DIR)/%.o,$(SOURCES))

# Arquivos de dependência
DEPS = $(OBJECTS:.o=.d)

# Diretório de saída para o executável
BIN_DIR = bin

# Diretório das DLLs (Linux: trocado para libs)
DLL_DIR = dlls

# Diretório dos recursos
ASSETS_DIR = assets

# Nome do executável principal
EXECUTABLE = $(BIN_DIR)/battle-network

# Flags de compilação para testes
CXXFLAGS_TEST = -I src/include -std=c++20 -g -O0
LDFLAGS_TEST = 
LIBS_TEST = 
SOURCES_TEST = src/main-test.cpp $(wildcard src/application/*/*.cpp) $(wildcard src/domain/*/*/*.cpp) $(wildcard src/utils/*/*.cpp) $(wildcard src/domain/*/*/*/*.cpp)
OBJECTS_TEST = $(patsubst src/%.cpp,$(BUILD_DIR_TEST)/%.o,$(SOURCES_TEST))

# Arquivos de dependência para testes
DEPS_TEST = $(OBJECTS_TEST:.o=.d)

# Diretório de saída para o executável de teste
BIN_DIR_TEST = bin-test

# Nome do executável de teste
EXECUTABLE_TEST = $(BIN_DIR_TEST)/battle-network-test

# Criação de diretórios automaticamente, quando necessário (Linux)
$(BUILD_DIR)/%.o: src/%.cpp
	@mkdir -p $(dir $@)
	$(CXX) $(CXXFLAGS) -c $< -o $@

$(BUILD_DIR_TEST)/%.o: src/%.cpp
	@mkdir -p $(dir $@)
	$(CXX) $(CXXFLAGS_TEST) -c $< -o $@

# Lê a versão do arquivo VERSION
VERSION := $(shell cat VERSION)

# Regra para compilar o executável principal com a versão
$(EXECUTABLE): $(OBJECTS)
	@mkdir -p $(BIN_DIR)
	@mkdir -p $(BIN_DIR)/assets
	$(CXX) $(LDFLAGS) $(OBJECTS) $(LIBS) -o $@
	@echo "Version: $(VERSION)" > $(BIN_DIR)/version.txt
	@echo "Copying libraries..."
	@cp -r $(DLL_DIR)/*.so $(BIN_DIR)/
	@echo "Copying assets..."
	@cp -r $(ASSETS_DIR)/* $(BIN_DIR)/assets/

# Regra para compilar o executável de teste
$(EXECUTABLE_TEST): $(OBJECTS_TEST)
	@mkdir -p $(BIN_DIR_TEST)
	$(CXX) $(LDFLAGS_TEST) $(OBJECTS_TEST) $(LIBS_TEST) -o $@

# Alvo para compilar os testes
tests: $(EXECUTABLE_TEST)

# Incluir arquivos de dependência
-include $(DEPS)
-include $(DEPS_TEST)

# Limpeza (Linux)
clean:
	rm -f $(EXECUTABLE) $(OBJECTS) $(DEPS)
	rm -rf $(BIN_DIR)
	rm -f $(EXECUTABLE_TEST) $(OBJECTS_TEST) $(DEPS_TEST)
	rm -rf $(BIN_DIR_TEST)
	rm -rf $(BUILD_DIR)
	rm -rf $(BUILD_DIR_TEST)
